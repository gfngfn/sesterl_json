module Decode = struct
  open Stdlib

  type error =
    | NotAValidJson
    | NotABoolean
    | NotAnInteger
    | NotAString
    | NotAnArray
    | MissingField(binary)
    | Failure(binary)

  type t<$a> =
    fun(RawValue.t) -> result<$a, error>

  val pure<$a>(v : $a) : t<$a> =
    fun(obj) -> Ok(v) end

  val fail<$a>(msg : binary) : t<$a> =
    fun(obj) -> Error(Failure(msg)) end

  val bool : fun() -> t<bool> = external 0 ```
    bool() ->
        fun(Obj) ->
            if
                erlang:is_boolean(Obj) -> {ok, Obj};
                true                   -> {error, not_a_boolean}
            end
        end.
  ```

  val int : fun() -> t<int> = external 0 ```
    int() ->
        fun(Obj) ->
            if
                erlang:is_integer(Obj) -> {ok, Obj};
                true                   -> {error, not_an_integer}
            end
        end.
  ```

  val string : fun() -> t<binary> = external 0 ```
    string() ->
        fun(Obj) ->
            if
                erlang:is_binary(Obj) -> {ok, Obj};
                true                  -> {error, not_a_string}
            end
        end.
  ```

  val list_impl<$a>(d : t<$a>, objs : list<RawValue.t>) : result<list<$a>, error> =
    case
      List.foldl(
        fun(res, obj) ->
          Result.bind(res, fun(acc) ->
            Result.bind(d(obj), fun(v) ->
              Ok(v :: acc)
            end)
          end)
        end,
        Ok([]),
        objs)
    of
    | Ok(acc)  -> Ok(List.reverse(acc))
    | Error(e) -> Error(e)
    end

  val list<$a> : fun(t<$a>) -> t<list<$a>> = external 1 ```
    list(Decoder) ->
        fun(Obj) ->
            try
                list_impl(Decoder, Obj)
            catch
                _:_ -> {error, not_an_array}
            end
        end.
  ```

  val bind<$a, $b>(d1 : t<$a>, d2f : fun($a) -> t<$b>) : t<$b> =
    fun(obj) ->
      case d1(obj) of
      | Ok(v)    -> d2f(v)(obj)
      | Error(e) -> Error(e)
      end
    end

  val field_impl : fun(binary, RawValue.t) -> option<RawValue.t> = external 2 ```
    field_impl(Key, Obj) ->
        try
            {ok, maps:get(Key, Obj)}
        catch
            _:_ -> error
        end.
  ```

  val field<$a>(key : binary, d : t<$a>) : t<$a> =
    fun(obj0) ->
      case field_impl(key, obj0) of
      | Some(obj1) -> d(obj1)
      | None       -> Error(MissingField(key))
      end
    end

  val map<$a, $b>(f : fun($a) -> $b, d : t<$a>) : t<$b> =
    fun(obj) ->
      Result.map(f, d(obj))
    end

  val map2<$a1, $a2, $b>(f : fun($a1, $a2) -> $b, d1 : t<$a1>, d2 : t<$a2>) : t<$b> =
    fun(obj) ->
      Result.bind(d1(obj), fun(v1) ->
        Result.bind(d2(obj), fun(v2) ->
          Ok(f(v1, v2))
        end)
      end)
    end

  val decode_impl : fun(binary) -> option<RawValue.t> = external 1 ```
    decode_impl(Bin) ->
        try
            {ok, jsone:decode(Bin)}
        catch
            _:_ -> error
        end.
  ```

  val run<$a>(d : t<$a>, s : binary) =
    case decode_impl(s) of
    | Some(obj) -> d(obj)
    | None      -> Error(NotAValidJson)
    end

end
