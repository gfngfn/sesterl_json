import Decode
import Encode

module Json :> sig
  open Stdlib

  module Decode : sig
    type t :: (o) -> o
    type error =
      | NotAValidJson
      | NotABoolean
      | NotAnInteger
      | NotAString
      | NotAnArray
      | MissingField(binary)
      | Failure(binary)
    val pure<$a> : fun($a) -> t<$a>
    val fail<$a> : fun(binary) -> t<$a>
    val bool : fun() -> t<bool>
    val int : fun() -> t<int>
    val string : fun() -> t<binary>
    val list<$a> : fun(t<$a>) -> t<list<$a>>
    val map<$a, $b> : fun(fun($a) -> $b, t<$a>) -> t<$b>
    val map2<$a1, $a2, $b> : fun(fun($a1, $a2) -> $b, t<$a1>, t<$a2>) -> t<$b>
    val bind<$a, $b> : fun(t<$a>, fun($a) -> t<$b>) -> t<$b>
    val run<$a> : fun(t<$a>, binary) -> result<$a, error>
  end

  module Encode : sig
    type t :: o
    val bool : fun(bool) -> t
    val int : fun(int) -> t
    val string : fun(binary) -> t
    val list : fun(list<t>) -> t
    val object : fun(RawMap.t<binary, t>) -> t
    val run : fun(t) -> binary
  end
end = struct
  module Decode = Decode
  module Encode = Encode
end
