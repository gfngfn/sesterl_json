import Decode

module DecodeTests = #[test] struct
  open Stdlib

  val single(t) =
    Testing.it("run", fun() ->
      assert Testing.equal(
        -expect t.expected,
        -got Decode.run(t.decoder, t.input),
      )
    end)

  #[test]
  val bool_test() =
    Testing.list(
      List.map(single, [
        {
          input    = "false",
          decoder  = Decode.bool(),
          expected = Ok(false),
        },
        {
          input    = "{\"foo\": true}",
          decoder  = Decode.field("foo", Decode.bool()),
          expected = Ok(true),
        },
        {
          input    = "{\"foo\": true",
          decoder  = Decode.field("foo", Decode.bool()),
          expected = Error(Decode.NotAValidJson),
        },
        {
          input    = "yes",
          decoder  = Decode.bool(),
          expected = Error(Decode.NotAValidJson),
        },
      ]))

  #[test]
  val int_test() =
    Testing.list(
      List.map(single, [
        {
          input    = "42",
          decoder  = Decode.int(),
          expected = Ok(42),
        },
        {
          input    = "{\"foo\": 42}",
          decoder  = Decode.field("foo", Decode.int()),
          expected = Ok(42),
        },
        {
          input    = "{\"foo\": \"toto\"}",
          decoder  = Decode.field("foo", Decode.int()),
          expected = Error(Decode.NotAnInteger),
        },
        {
          input    = "{\"bar\": 42}",
          decoder  = Decode.field("foo", Decode.int()),
          expected = Error(Decode.MissingField("foo")),
        },
      ]))

  #[test]
  val string_test() =
    Testing.list(
      List.map(single, [
        {
          input    = "\"toto\"",
          decoder  = Decode.string(),
          expected = Ok("toto"),
        },
        {
          input    = "{\"foo\": \"toto\"}",
          decoder  = Decode.field("foo", Decode.string()),
          expected = Ok("toto"),
        },
      ]))

  #[test]
  val int_list_test() =
    Testing.list(
      List.map(single, [
        {
          input    = "[3, 1, 4]",
          decoder  = Decode.list(Decode.int()),
          expected = Ok([3, 1, 4]),
        },
        {
          input    = "[{\"bar\": 3}, {\"bar\": 1}, {\"bar\": 4}]",
          decoder  = Decode.list(Decode.field("bar", Decode.int())),
          expected = Ok([3, 1, 4]),
        },
        {
          input    = "3",
          decoder  = Decode.list(Decode.int()),
          expected = Error(Decode.NotAnArray),
        },
        {
          input    = "[3, [1]]",
          decoder  = Decode.list(Decode.int()),
          expected = Error(Decode.NotAnInteger),
        },
      ]))

  #[test]
  val bind_test() =
    single({
      input =
        "{\"foo\": 42, \"bar\": \"toto\"}",
      decoder =
        Decode.bind(
          Decode.field("foo", Decode.int()),
          fun(n) ->
            Decode.bind(
              Decode.field("bar", Decode.string()),
              fun(s) ->
                Decode.pure({n, s})
              end
            )
          end
        ),
      expected =
        Ok({42, "toto"})
    })

  #[test]
  val map_test() =
    single({
      input =
        "{\"foo\": 42, \"bar\": \"toto\"}",
      decoder =
        Decode.map(
          fun(n) -> n * 2 end,
          Decode.field("foo", Decode.int()),
        ),
      expected =
        Ok(84)
    })

  #[test]
  val map2_test() =
    single({
      input =
        "{\"foo\": 42, \"bar\": \"toto\"}",
      decoder =
        Decode.map2(
          fun(n, s) -> {n, s} end,
          Decode.field("foo", Decode.int()),
          Decode.field("bar", Decode.string()),
        ),
      expected =
        Ok({42, "toto"})
    })

end
